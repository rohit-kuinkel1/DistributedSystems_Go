syntax = "proto3";

package database;
option go_package = "pkg/generated/rpc";

import "google/protobuf/timestamp.proto";

service DatabaseService {
  //add operation
  rpc CreateSensorData(SensorDataRequest) returns (OperationResponse);
  
  //read operations
  rpc GetAllSensorData(EmptyRequest) returns (SensorDataList);
  rpc GetSensorDataBySensorId(SensorIdRequest) returns (SensorDataList);
  
  //update operation (idk if we will ever update the data, but lets define it for now)
  rpc UpdateSensorData(SensorDataRequest) returns (OperationResponse);
  
  //delete operation
  rpc DeleteSensorData(SensorIdRequest) returns (OperationResponse);

  //for the two phase commit operations
  rpc PrepareTransaction(TransactionRequest) returns (PrepareResponse);
  rpc CommitTransaction(TransactionId) returns (OperationResponse);
  rpc AbortTransaction(TransactionId) returns (OperationResponse);
}

// Message for sensor data
message SensorDataRequest {
  string sensor_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  double value = 3;
  string unit = 4;
}

//response for all the operations
message OperationResponse {
  bool success = 1;
  string message = 2;
}

//a collection of sensor data points
message SensorDataList {
  repeated SensorDataRequest data = 1;
}

//to getting all data
message EmptyRequest {}

//a request but with sensor ID included
message SensorIdRequest {
  string sensor_id = 1;
}




//additions for 3.5
// Transaction request containing both transaction ID and sensor data
message TransactionRequest {
  string transaction_id = 1;
  SensorDataRequest sensor_data = 2;
}

// Response for prepare phase with success/failure status
message PrepareResponse {
  bool success = 1;
  string message = 2;
  string transaction_id = 3;
}

// Transaction ID message for commit/abort operations
message TransactionId {
  string transaction_id = 1;
}