// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: pkg/rpc/database.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message for sensor data
type SensorDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorId      string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value         float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Unit          string                 `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorDataRequest) Reset() {
	*x = SensorDataRequest{}
	mi := &file_pkg_rpc_database_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorDataRequest) ProtoMessage() {}

func (x *SensorDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_database_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorDataRequest.ProtoReflect.Descriptor instead.
func (*SensorDataRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_database_proto_rawDescGZIP(), []int{0}
}

func (x *SensorDataRequest) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *SensorDataRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SensorDataRequest) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SensorDataRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// response for all the operations
type OperationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationResponse) Reset() {
	*x = OperationResponse{}
	mi := &file_pkg_rpc_database_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationResponse) ProtoMessage() {}

func (x *OperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_database_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationResponse.ProtoReflect.Descriptor instead.
func (*OperationResponse) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_database_proto_rawDescGZIP(), []int{1}
}

func (x *OperationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *OperationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// a collection of sensor data points
type SensorDataList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*SensorDataRequest   `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorDataList) Reset() {
	*x = SensorDataList{}
	mi := &file_pkg_rpc_database_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorDataList) ProtoMessage() {}

func (x *SensorDataList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_database_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorDataList.ProtoReflect.Descriptor instead.
func (*SensorDataList) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_database_proto_rawDescGZIP(), []int{2}
}

func (x *SensorDataList) GetData() []*SensorDataRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

// to getting all data
type EmptyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	mi := &file_pkg_rpc_database_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_database_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_database_proto_rawDescGZIP(), []int{3}
}

// a request but with sensor ID included
type SensorIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SensorId      string                 `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorIdRequest) Reset() {
	*x = SensorIdRequest{}
	mi := &file_pkg_rpc_database_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorIdRequest) ProtoMessage() {}

func (x *SensorIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_database_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorIdRequest.ProtoReflect.Descriptor instead.
func (*SensorIdRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_database_proto_rawDescGZIP(), []int{4}
}

func (x *SensorIdRequest) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

// additions for 3.5
// Transaction request containing both transaction ID and sensor data
type TransactionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	SensorData    *SensorDataRequest     `protobuf:"bytes,2,opt,name=sensor_data,json=sensorData,proto3" json:"sensor_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionRequest) Reset() {
	*x = TransactionRequest{}
	mi := &file_pkg_rpc_database_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequest) ProtoMessage() {}

func (x *TransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_database_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequest.ProtoReflect.Descriptor instead.
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_database_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TransactionRequest) GetSensorData() *SensorDataRequest {
	if x != nil {
		return x.SensorData
	}
	return nil
}

// Response for prepare phase with success/failure status
type PrepareResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	TransactionId string                 `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareResponse) Reset() {
	*x = PrepareResponse{}
	mi := &file_pkg_rpc_database_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareResponse) ProtoMessage() {}

func (x *PrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_database_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareResponse.ProtoReflect.Descriptor instead.
func (*PrepareResponse) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_database_proto_rawDescGZIP(), []int{6}
}

func (x *PrepareResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PrepareResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PrepareResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// Transaction ID message for commit/abort operations
type TransactionId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionId) Reset() {
	*x = TransactionId{}
	mi := &file_pkg_rpc_database_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionId) ProtoMessage() {}

func (x *TransactionId) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_database_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionId.ProtoReflect.Descriptor instead.
func (*TransactionId) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_database_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionId) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

var File_pkg_rpc_database_proto protoreflect.FileDescriptor

const file_pkg_rpc_database_proto_rawDesc = "" +
	"\n" +
	"\x16pkg/rpc/database.proto\x12\bdatabase\x1a\x1fgoogle/protobuf/timestamp.proto\"\x94\x01\n" +
	"\x11SensorDataRequest\x12\x1b\n" +
	"\tsensor_id\x18\x01 \x01(\tR\bsensorId\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x01R\x05value\x12\x12\n" +
	"\x04unit\x18\x04 \x01(\tR\x04unit\"G\n" +
	"\x11OperationResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"A\n" +
	"\x0eSensorDataList\x12/\n" +
	"\x04data\x18\x01 \x03(\v2\x1b.database.SensorDataRequestR\x04data\"\x0e\n" +
	"\fEmptyRequest\".\n" +
	"\x0fSensorIdRequest\x12\x1b\n" +
	"\tsensor_id\x18\x01 \x01(\tR\bsensorId\"y\n" +
	"\x12TransactionRequest\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\x12<\n" +
	"\vsensor_data\x18\x02 \x01(\v2\x1b.database.SensorDataRequestR\n" +
	"sensorData\"l\n" +
	"\x0fPrepareResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12%\n" +
	"\x0etransaction_id\x18\x03 \x01(\tR\rtransactionId\"6\n" +
	"\rTransactionId\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId2\xf3\x04\n" +
	"\x0fDatabaseService\x12L\n" +
	"\x10CreateSensorData\x12\x1b.database.SensorDataRequest\x1a\x1b.database.OperationResponse\x12D\n" +
	"\x10GetAllSensorData\x12\x16.database.EmptyRequest\x1a\x18.database.SensorDataList\x12N\n" +
	"\x17GetSensorDataBySensorId\x12\x19.database.SensorIdRequest\x1a\x18.database.SensorDataList\x12L\n" +
	"\x10UpdateSensorData\x12\x1b.database.SensorDataRequest\x1a\x1b.database.OperationResponse\x12J\n" +
	"\x10DeleteSensorData\x12\x19.database.SensorIdRequest\x1a\x1b.database.OperationResponse\x12M\n" +
	"\x12PrepareTransaction\x12\x1c.database.TransactionRequest\x1a\x19.database.PrepareResponse\x12I\n" +
	"\x11CommitTransaction\x12\x17.database.TransactionId\x1a\x1b.database.OperationResponse\x12H\n" +
	"\x10AbortTransaction\x12\x17.database.TransactionId\x1a\x1b.database.OperationResponseB\x13Z\x11pkg/generated/rpcb\x06proto3"

var (
	file_pkg_rpc_database_proto_rawDescOnce sync.Once
	file_pkg_rpc_database_proto_rawDescData []byte
)

func file_pkg_rpc_database_proto_rawDescGZIP() []byte {
	file_pkg_rpc_database_proto_rawDescOnce.Do(func() {
		file_pkg_rpc_database_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_rpc_database_proto_rawDesc), len(file_pkg_rpc_database_proto_rawDesc)))
	})
	return file_pkg_rpc_database_proto_rawDescData
}

var file_pkg_rpc_database_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pkg_rpc_database_proto_goTypes = []any{
	(*SensorDataRequest)(nil),     // 0: database.SensorDataRequest
	(*OperationResponse)(nil),     // 1: database.OperationResponse
	(*SensorDataList)(nil),        // 2: database.SensorDataList
	(*EmptyRequest)(nil),          // 3: database.EmptyRequest
	(*SensorIdRequest)(nil),       // 4: database.SensorIdRequest
	(*TransactionRequest)(nil),    // 5: database.TransactionRequest
	(*PrepareResponse)(nil),       // 6: database.PrepareResponse
	(*TransactionId)(nil),         // 7: database.TransactionId
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_pkg_rpc_database_proto_depIdxs = []int32{
	8,  // 0: database.SensorDataRequest.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 1: database.SensorDataList.data:type_name -> database.SensorDataRequest
	0,  // 2: database.TransactionRequest.sensor_data:type_name -> database.SensorDataRequest
	0,  // 3: database.DatabaseService.CreateSensorData:input_type -> database.SensorDataRequest
	3,  // 4: database.DatabaseService.GetAllSensorData:input_type -> database.EmptyRequest
	4,  // 5: database.DatabaseService.GetSensorDataBySensorId:input_type -> database.SensorIdRequest
	0,  // 6: database.DatabaseService.UpdateSensorData:input_type -> database.SensorDataRequest
	4,  // 7: database.DatabaseService.DeleteSensorData:input_type -> database.SensorIdRequest
	5,  // 8: database.DatabaseService.PrepareTransaction:input_type -> database.TransactionRequest
	7,  // 9: database.DatabaseService.CommitTransaction:input_type -> database.TransactionId
	7,  // 10: database.DatabaseService.AbortTransaction:input_type -> database.TransactionId
	1,  // 11: database.DatabaseService.CreateSensorData:output_type -> database.OperationResponse
	2,  // 12: database.DatabaseService.GetAllSensorData:output_type -> database.SensorDataList
	2,  // 13: database.DatabaseService.GetSensorDataBySensorId:output_type -> database.SensorDataList
	1,  // 14: database.DatabaseService.UpdateSensorData:output_type -> database.OperationResponse
	1,  // 15: database.DatabaseService.DeleteSensorData:output_type -> database.OperationResponse
	6,  // 16: database.DatabaseService.PrepareTransaction:output_type -> database.PrepareResponse
	1,  // 17: database.DatabaseService.CommitTransaction:output_type -> database.OperationResponse
	1,  // 18: database.DatabaseService.AbortTransaction:output_type -> database.OperationResponse
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_pkg_rpc_database_proto_init() }
func file_pkg_rpc_database_proto_init() {
	if File_pkg_rpc_database_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_rpc_database_proto_rawDesc), len(file_pkg_rpc_database_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_rpc_database_proto_goTypes,
		DependencyIndexes: file_pkg_rpc_database_proto_depIdxs,
		MessageInfos:      file_pkg_rpc_database_proto_msgTypes,
	}.Build()
	File_pkg_rpc_database_proto = out.File
	file_pkg_rpc_database_proto_goTypes = nil
	file_pkg_rpc_database_proto_depIdxs = nil
}
